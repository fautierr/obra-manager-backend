# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProjectStatus {
  id: Int!
  name: String!
  description: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  created_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Project {
  id: ID!
  name: String!
  description: String
  created_at: DateTime!
  user: User!
  status: ProjectStatus!
  updated_at: DateTime!
  is_deleted: Boolean!
}

type ProjectsPagination {
  data: [Project!]!
  total: Int!
  page: Int!
  lastPage: Int!
}

type Category {
  id: Int!
  name: String!
}

type Unit {
  id: Int!
  name: String!
  abbreviation: String!
}

type Material {
  id: Int!
  name: String!
  unit: Unit!
  description: String
  created_at: DateTime
}

type ProjectMaterial {
  id: ID!
  project: Project!
  material: Material!
  quantity: Float!
  unit_price: Float
  createdAt: DateTime!
}

type MaterialBreakdown {
  materialId: ID!
  materialName: String!
  quantity: Float!
  totalCost: Float!
  percentageOfProject: Float!
}

type ProjectComparison {
  project1Id: ID!
  project1Total: Float!
  project2Id: ID!
  project2Total: Float!
  difference: Float!
  differencePercentage: Float!
  higherProjectId: ID!
  project1Materials: [MaterialBreakdown!]!
  project2Materials: [MaterialBreakdown!]!
}

type ProjectTotals {
  projectId: ID!
  totalCost: Float!
  materials: [MaterialBreakdown!]!
}

type Query {
  findProjectsByUserId(userId: String!, page: Int! = 1, limit: Int! = 5): ProjectsPagination!
  findProjectById(projectId: String!): Project!
  findAllUsers: [User!]!
  findUserById(userId: String!): User!
  findAllCategories: [Category!]!
  findAllProjectStatuses: [ProjectStatus!]!
  findAllUnits: [Unit!]!
  findAllMaterials: [Material!]!
  findMaterialById(materialId: Float!): Material!
  findMaterialsByProjectId(projectId: String!): [ProjectMaterial!]!
  findProjectTotals(projectId: String!): ProjectTotals!
  findProjectComparison(project1Id: String!, project2Id: String!): ProjectComparison!
}

type Mutation {
  createProject(input: CreateProjectInput!): Project!
  updateProject(projectId: String!, input: UpdateProjectInput!): Project!
  deleteProject(projectId: String!): Project!
  createUser(input: CreateUserInput!): User!
  createProjectMaterial(input: CreateProjectMaterialInput!): ProjectMaterial!
  updateProjectMaterial(input: UpdateProjectMaterialInput!): ProjectMaterial!
  deleteProjectMaterial(projectMaterialId: Int!): Boolean!
}

input CreateProjectInput {
  userId: ID!
  name: String!
  description: String
  statusId: Int
}

input UpdateProjectInput {
  name: String
  description: String
  statusId: Int
}

input CreateUserInput {
  name: String!
  email: String!
}

input CreateProjectMaterialInput {
  projectId: ID!
  materialId: Int!
  quantity: Float!
  unitPrice: Float
}

input UpdateProjectMaterialInput {
  projectId: ID
  materialId: Int
  quantity: Float
  unitPrice: Float
  id: Int!
}